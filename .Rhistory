xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
library(ggplot2)
gf1 <- ggscatter(my_data, x = "amp", y = "ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "log(D)") +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
library(ggExtra)
gf1 <- ggscatter(my_data, x = "amp", y = "ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "log(D)") +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
gf1
gf1 <- ggscatter(my_data, x = "amp", y = "ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "log(D)") +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
# gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
#                          xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
#                          xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
#                          xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
gf1
eff_inx <- !is.nan(Ds_log)
my_data <- data.frame(amp = ave_amp[eff_inx], Ds = log(Ds_log[eff_inx]))
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "log(D)") +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
# gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
#                          xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
#                          xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
#                          xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
gf1
gf1
library(easyGgplot2)
install.packages("devtools")
library(devtools)
install_github("easyGgplot2", "kassambara")
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = TeX(r'($\log_{10}(D)$)') +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
# gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
#                          xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
#                          xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
#                          xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
gf1
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = TeX("$\log_{10}(D)$") +
install.packages("latex2exp")
library(latex2exp)
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = TeX(r'$\log_{10}(D)$') +
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\alpha  x^\alpha$, where $\alpha \in 1\ldots 5$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
# gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
#                          xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
#                          xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
#                          xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
gf1
gf1
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_10(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
# gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
#                          xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
#                          xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
#                          xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
gf1
f1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
# gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
#                          xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
#                          xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
#                          xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
gf1
gf1
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)  # Add correlation coefficient
# set the font size of label and axis
# gf1 <- ggplot2.customize(gf1,axisLine=c(0.3,"solid","black"),showLegend=FALSE,
#                          xtitle="spontaneous rate (Hz)", ytitle="Number of inhibitor",
#                          xtitleFont=c(16,"plain", "black"),ytitleFont=c(16,"plain", "black"),
#                          xTickLabelFont=c(16,"plain", "black"),yTickLabelFont=c(16,"plain", "black"))
gf1
add = "reg.line", conf.int = TRUE, color = mycolor[9],
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
stat_cor(method = "pearson", label.x = 0.3, label.y = -2)
# +
gf1
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
sFolder <-'/Users/shawnqin/Google Drive/olfactoryCoding/figures/'
gf1
pwed
getwd()
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.54,height = 2.8)
sFolder
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20)) +
stat_cor(method = "pearson", label.x = 0.28, label.y = -2.5)
gf1
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.28, label.y = -2.5)
gf1
gf1
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.54,height = 2.8)
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.2, label.y = -2.8)
gf1
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.54,height = 2.8)
dev.off()
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.22, label.y = -2.2)
gf1
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.54,height = 2.8)
dev.off()
data_time_amp <- data.frame(amp = ave_amp[eff_inx], acti = acti_time[eff_inx])
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[7],fill = "lightgray"),
xlab = "Mean peak amplitude" + ylab = "Fraction of active time") +
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[7],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.05, label.y = 0.7)
gf2
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[7],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.2, label.y = 0.8)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.54,height = 2.8)
dev.off()
dev.off()
dev.off(gf2)
f2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[9],
add.params = list(color = mycolor[7],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.2, label.y = 0.8)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf2,width = 3.54,height = 2.8)
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.2, label.y = 0.8)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf2,width = 3.54,height = 2.8)
eff_inx <- !is.nan(Ds_log)
my_data <- data.frame(amp = ave_amp[eff_inx], Ds = log(Ds_log[eff_inx]))
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.22, label.y = -2.2)
gf1
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.54,height = 2.8)
dev.off()
data_time_amp <- data.frame(amp = ave_amp[eff_inx], acti = acti_time[eff_inx])
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.2, label.y = 0.8)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf2,width = 3.54,height = 2.8)
dev.off()
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.15, label.y = 0.8)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf2,width = 3.54,height = 2.8)
dev.off()
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.15, label.y = 0.83)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf2,width = 3.54,height = 2.8)
dev.off()
q()
knitr::opts_chunk$set(echo = TRUE)
# library to read matlab data formats into R
library(raveio)
library(ggplot2)
library(ggExtra)
library("ggpubr")
library(latex2exp)
library(RColorBrewer) #this package is used for color settings
dFile <- "/Users/shawnqin/OneDrive - Harvard University/MATLAB/representationDrift/data/revision/ringPlace_N200_online_06202022.mat"
data <- read_mat(dFile)
sFolder <-'/Users/shawnqin/Google Drive/olfactoryCoding/figures/'
ave_amp <- data$aveAmp
Ds_log<- data$Ds_log
acti_time <- data$tolActiTime
mycolor <- brewer.pal(9,"Greys")
#  Diffusion constant vs averaged amplitude
eff_inx <- !is.nan(Ds_log)
my_data <- data.frame(amp = ave_amp[eff_inx], Ds = log(Ds_log[eff_inx]))
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.22, label.y = -2.2)
gf1
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.3,height = 2.8)
dev.off()
# str(data)
# active time vs mean peak amplitude
data_time_amp <- data.frame(amp = ave_amp[eff_inx], acti = acti_time[eff_inx])
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.15, label.y = 0.83)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf2,width = 3.3,height = 2.8)
dev.off()
# library to read matlab data formats into R
library(raveio)
library(ggplot2)
library(ggExtra)
library("ggpubr")
library(latex2exp)
library(RColorBrewer) #this package is used for color settings
dFile <- "/Users/shawnqin/OneDrive - Harvard University/MATLAB/representationDrift/data/revision/ringPlace_N200_online_06202022.mat"
data <- read_mat(dFile)
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14)) +
stat_cor(method = "pearson", label.x = 0.22, label.y = -2.2)
gf1
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.2,height = 2.7)
dev.off()
gf1
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 16)) +
stat_cor(method = "pearson", label.x = 0.22, label.y = -2.2)
gf1
gf1
figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf1,width = 3.2,height = 2.7)
dev.off()
f2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 16)) +
stat_cor(method = "pearson", label.x = 0.15, label.y = 0.83)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf2,width = 3.2,height = 2.7)
dev.off()
gf2 <- ggscatter(data_time_amp, x = "amp", y = "acti", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude", ylab = "Fraction of active time") +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 16)) +
stat_cor(method = "pearson", label.x = 0.15, label.y = 0.83)
gf2
figFile <- paste(sFolder,"ring_actiTime_amp_online_06202022.pdf",sep='')
ggsave(figFile,gf2,width = 3.2,height = 2.7)
dev.off()
q()
getwd()
setwd("/Users/shawnqin/OneDrive - Harvard University/MATLAB/drift_code/")
ls
getwd()
ls()
install.packages("ggstatsplot")
knitr::opts_chunk$set(echo = TRUE)
library(ggstatsplot)
dplyr::glimpse(movies_long)
## plot
ggscatterstats(
data = movies_long, ## data frame from which variables are taken
x = budget, ## predictor/independent variable
y = rating, ## dependent variable
xlab = "Budget (in millions of US dollars)", ## label for the x-axis
ylab = "Rating on IMDB", ## label for the y-axis
label.var = title, ## variable to use for labeling data points
label.expression = rating < 5 & budget > 100, ## expression for deciding which points to label
point.label.args = list(alpha = 0.7, size = 4, color = "grey50"),
xfill = "#CC79A7", ## fill for marginals on the x-axis
yfill = "#009E73", ## fill for marginals on the y-axis
title = "Relationship between movie budget and IMDB rating",
caption = "Source: www.imdb.com"
)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
# library to read matlab data formats into R
library(raveio)
library(ggplot2)
library(ggExtra)
library("ggpubr")
library(latex2exp)
library(RColorBrewer) #this package is used for color settings
dFile <- "/Users/shawnqin/OneDrive - Harvard University/MATLAB/drift_code/data/ringPlace_N200_online_06202022.mat"
data <- read_mat(dFile)
sFolder <-'/Users/shawnqin/OneDrive - Harvard University/MATLAB/drift_code/figures/'
ave_amp <- data$aveAmp
Ds_log<- data$Ds_log
acti_time <- data$tolActiTime
mycolor <- brewer.pal(9,"Greys")
#  Diffusion constant vs averaged amplitude
eff_inx <- !is.nan(Ds_log)
my_data <- data.frame(amp = ave_amp[eff_inx], Ds = log10(Ds_log[eff_inx]))
gf1 <- ggscatter(my_data, x = "amp", y = "Ds", size = 2,
add = "reg.line", conf.int = TRUE, color = mycolor[7],
add.params = list(color = mycolor[9],fill = "lightgray"),
xlab = "Mean peak amplitude") + ylab(TeX(r'($\log_{10}(D)$)')) +
#scale_x_continuous(limits = c(-2, 60)) +
theme(axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text = element_text(size = 16)) +
stat_cor(method = "pearson", label.x = 0.22, label.y = -1) + ylim(-2.7, -0.8)
gf1
#figFile <- paste(sFolder,"ring_Ds_amp_online_06202022.pdf",sep='')
#ggsave(figFile,gf1,width = 3.4,height = 2.7)
#dev.off()
# str(data)
library(ggstatsplot)
ggscatterstats(
data = my_data, ## data frame from which variables are taken
x = amp, ## predictor/independent variable
y = Ds, ## dependent variable
xlab = "noise amplitude", ## label for the x-axis
ylab = "diffusion constant", ## label for the y-axis
label.var = title, ## variable to use for labeling data points
#label.expression = rating < 5 & budget > 100, ## expression for deciding which points to label
point.label.args = list(alpha = 0.7, size = 4, color = "grey50"),
xfill = "#CC79A7", ## fill for marginals on the x-axis
yfill = "#009E73", ## fill for marginals on the y-axis
title = "Relationship between movie budget and IMDB rating",
caption = "Source: www.imdb.com"
)
library(ggstatsplot)
library(ggstatsplot)
ggscatterstats(
data = my_data, ## data frame from which variables are taken
x = amp, ## predictor/independent variable
y = Ds, ## dependent variable
xlab = "noise amplitude", ## label for the x-axis
ylab = "diffusion constant", ## label for the y-axis
#label.var = title, ## variable to use for labeling data points
#label.expression = rating < 5 & budget > 100, ## expression for deciding which points to label
point.label.args = list(alpha = 0.7, size = 4, color = "grey50"),
xfill = "#CC79A7", ## fill for marginals on the x-axis
yfill = "#009E73", ## fill for marginals on the y-axis
title = "Relationship between movie budget and IMDB rating",
caption = "Source: www.imdb.com"
)
?cor
cor.test
cor.test(my_data$amp,my_data$Ds)
cor.test(my_data$amp,my_data$Ds,alternative="two.sided")
cor.test(my_data$amp,my_data$Ds,alternative="greater")
cor.test(my_data$amp,my_data$Ds,alternative="less")
q()
